"use strict";(self.webpackChunkangular_template_for_threejs=self.webpackChunkangular_template_for_threejs||[]).push([[5004],{"./projects/atft/src/lib/actor/data-center/atft-data-center-actor.module.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{F:()=>AtftDataCenterActorModule});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),abstract_empty_directive=__webpack_require__("./projects/atft/src/lib/object/abstract-empty-directive.ts"),provide_parent=__webpack_require__("./projects/atft/src/lib/util/provide-parent.ts");let LayerActorComponent=class LayerActorComponent extends abstract_empty_directive.m{constructor(){super(...arguments),this.render=new core.EventEmitter,this.selected=new core.EventEmitter,this.deselected=new core.EventEmitter,this.color="#A0A0A0"}set width(width){this._width=width,this.translateLabelX=this._width/2-10}get width(){return this._width}onSelected(){this.color="#A4A4A4"}onDeselected(){this.color="#A0A0A0"}onClick(){this.color="#A0A0A0"}static#_=this.propDecorators={label:[{type:core.Input}],width:[{type:core.Input}],height:[{type:core.Input}],render:[{type:core.Output}],selected:[{type:core.Output}],deselected:[{type:core.Output}]}};LayerActorComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"atft-layer-actor",providers:[(0,provide_parent.T)(LayerActorComponent)],template:'\n    <atft-plane-mesh atft-raycaster-group [width]="width" [height]="height" [materialColor]="color" (mouseEnter)="onSelected()"\n                     (mouseExit)="onDeselected()">\n      <atft-text-mesh [centered]="true" [text]="label" [size]="5" [translateX]="translateLabelX" [rotateZ]="(90 | deg2rad)"\n                      materialColor="#E0E0E0">\n      </atft-text-mesh>\n    </atft-plane-mesh>\n  '})],LayerActorComponent);var common=__webpack_require__("./node_modules/@angular/common/fesm2022/common.mjs"),atft_module=__webpack_require__("./projects/atft/src/lib/atft.module.ts"),abstract_server_actor=__webpack_require__("./projects/atft/src/lib/actor/data-center/server/abstract-server-actor.ts");let ServerBarrelActorComponent=class ServerBarrelActorComponent extends abstract_server_actor.F{constructor(){super(...arguments),this.textColor="#DADADA"}};ServerBarrelActorComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"atft-server-barrel-actor",providers:[(0,provide_parent.T)(ServerBarrelActorComponent)],template:'\n    <atft-empty name="server-box">\n\n      \x3c!-- TODO: template? --\x3e\n      <atft-empty atft-raycaster-group (mouseEnter)="onSelected()" (mouseExit)="onDeselected()" (click)="onClick()">\n        <atft-svg-loader *ngIf="icon" [icon]="icon" overrideMaterialColor="#ffffff"\n                         material="basic" [maxX]="6" [maxY]="6" [translateZ]="13.1" [rotateZ]="(180 | deg2rad)" [rotateY]="(180 | deg2rad)">\n        </atft-svg-loader>\n\n        <atft-cylinder-mesh *ngFor="let z of [2, 6.5, 11]"\n                            [height]="4" [radiusTop]="6" [radiusBottom]="6" [radialSegments]="30" [openEnded]="false"\n                            material="phong" [materialColor]="color" [translateZ]="z" [rotateX]="(90 | deg2rad)">\n        </atft-cylinder-mesh>\n      </atft-empty>\n\n      <atft-text-mesh [text]="label" [size]="2" [bevelEnabled]="false" [height]="0" [centered]="true"\n                      [material]="\'basic\'" [materialColor]="textColor" [translateY]="-11" [translateZ]="0.2">\n      </atft-text-mesh>\n      <atft-frame-mesh *ngIf="showFrame" [thickness]="1" [sizeX]="15" [sizeY]="15" [translateZ]="0.1" material="basic"\n                       [materialColor]="color">\n      </atft-frame-mesh>\n    </atft-empty>\n  '})],ServerBarrelActorComponent);var server_stand_actor_component=__webpack_require__("./projects/atft/src/lib/actor/data-center/server/server-stand-actor.component.ts");let ServerCompactActorComponent=class ServerCompactActorComponent extends abstract_server_actor.F{};ServerCompactActorComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"atft-server-compact-actor",providers:[(0,provide_parent.T)(ServerCompactActorComponent)],template:'\n      <atft-empty name="server-box">\n\n          \x3c!-- TODO: template? --\x3e\n          <atft-empty atft-raycaster-group (mouseEnter)="onSelected()" (mouseExit)="onDeselected()" (click)="onClick()">\n              <atft-box-mesh [height]="10" [width]="10" [depth]="3" material="phong" [materialColor]="color" [translateZ]="1.5"\n                             atft-raycaster-group (mouseEnter)="onSelected()" (mouseExit)="onDeselected()" (click)="onClick()">\n                  <atft-svg-loader #svg *ngIf="icon" [icon]="icon" overrideMaterialColor="#ffffff"\n                                   material="basic" [maxX]="6" [maxY]="6" [translateZ]="1.6"\n                                   [translateY]="0" [rotateZ]="(180 | deg2rad)" [rotateY]="(180 | deg2rad)">\n                  </atft-svg-loader>\n              </atft-box-mesh>\n          </atft-empty>\n\n          <atft-text-mesh [text]="label" [size]="2" [bevelEnabled]="false" [height]="0" [centered]="true"\n                          material="basic" materialColor="#DADADA" [translateY]="-11" [translateZ]="0.2">\n          </atft-text-mesh>\n          <atft-frame-mesh *ngIf="showFrame" [thickness]="1" [sizeX]="15" [sizeY]="15" [translateZ]="0.1" material="basic"\n                           [materialColor]="color">\n          </atft-frame-mesh>\n      </atft-empty>\n  '})],ServerCompactActorComponent);let ServerIconActorComponent=class ServerIconActorComponent extends abstract_server_actor.F{};ServerIconActorComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"atft-server-icon-actor",providers:[(0,provide_parent.T)(ServerIconActorComponent)],template:'\n    <atft-empty name="server-box">\n\n      <atft-empty atft-raycaster-group (mouseEnter)="onSelected()" (mouseExit)="onDeselected()" (click)="onClick()">\n        <atft-svg-loader #svg *ngIf="icon" [icon]="icon" overrideMaterialColor="#ffffff" [translateZ]="0.1"\n                         material="basic" [maxX]="13" [maxY]="13"\n                         [translateY]="0" [rotateZ]="(180 | deg2rad)" [rotateY]="(180 | deg2rad)">\n        </atft-svg-loader>\n      </atft-empty>\n\n      <atft-text-mesh [text]="label" [size]="2" [bevelEnabled]="false" [height]="0" [centered]="true"\n                      material="basic" materialColor="#DADADA" [translateY]="-11" [translateZ]="0.2">\n      </atft-text-mesh>\n      <atft-frame-mesh *ngIf="showFrame" [thickness]="1" [sizeX]="15" [sizeY]="15" [translateZ]="0.1" material="basic"\n                       [materialColor]="color">\n      </atft-frame-mesh>\n\n    </atft-empty>\n  '})],ServerIconActorComponent);let WorkstationActorComponent=class WorkstationActorComponent extends abstract_server_actor.F{constructor(){super(...arguments),this.videoSrc="https://raw.githubusercontent.com/makimenko/files/master/angular-template-for-threejs/videos/ui/retro_futuristic_ui_360p.mp4"}static#_=this.propDecorators={videoSrc:[{type:core.Input}]}};WorkstationActorComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"atft-workstation-actor",providers:[(0,provide_parent.T)(WorkstationActorComponent)],template:'\n    <atft-empty name="server-box">\n\n      \x3c!-- TODO: template? --\x3e\n      <atft-empty atft-raycaster-group (mouseEnter)="onSelected()" (mouseExit)="onDeselected()" (click)="onClick()">\n        <atft-box-mesh [height]="10" [width]="10" [depth]="0.5" material="phong" [materialColor]="color" [translateZ]="0.5">\n        </atft-box-mesh>\n        <atft-box-mesh [height]="12.25" [width]="21" [depth]="1" [materialColor]="color" material="phong"\n                       [rotateX]="(80 | deg2rad)" [translateZ]="7">\n\n          <atft-video-mesh *ngIf="videoSrc" [height]="11.25" [width]="20" [translateZ]="0.6" [videoSrc]="videoSrc">\n          </atft-video-mesh>\n          <atft-box-mesh *ngIf="!videoSrc" [height]="11.25" [width]="20" [depth]="0" [translateZ]="0.6" materialColor="#ffffff"\n                         [depthWrite]="false">\n          </atft-box-mesh>\n\n        </atft-box-mesh>\n      </atft-empty>\n\n      <atft-text-mesh [text]="label" [size]="2" [bevelEnabled]="false" [height]="0" [centered]="true"\n                      material="basic" materialColor="#DADADA" [translateY]="-11" [translateZ]="0.2">\n      </atft-text-mesh>\n      <atft-frame-mesh *ngIf="showFrame" [thickness]="1" [sizeX]="15" [sizeY]="15" [translateZ]="0.1" material="basic"\n                       [materialColor]="color">\n      </atft-frame-mesh>\n    </atft-empty>\n  '})],WorkstationActorComponent);var three_module=__webpack_require__("./node_modules/three/build/three.module.js");let GridActorComponent=class GridActorComponent extends abstract_empty_directive.m{constructor(){super(...arguments),this.size=5,this.iterationsX=20,this.iterationsY=20,this.offset=1.05,this.render=new core.EventEmitter,this.gridEnter=new core.EventEmitter,this.deselected=new core.EventEmitter,this.gridClick=new core.EventEmitter,this.color="#A0A0A0"}onMouseEnter(event){const pos=this.getLinePosition(event);pos&&this.gridEnter.emit(pos)}onMouseClick(event){const pos=this.getLinePosition(event);pos&&this.gridClick.emit(pos)}getLinePosition(event){if(event.face){const meshPosition=this.grid.getObject().geometry.attributes.position,geometry=new three_module.u9r;geometry.setAttribute("position",new three_module.TlE(new Float32Array(12),3));const linePosition=new three_module.x12(geometry,new three_module.nls({color:16777215,transparent:!0})).geometry.attributes.position;return linePosition.copyAt(0,meshPosition,event.face.a),linePosition.copyAt(1,meshPosition,event.face.b),linePosition.copyAt(2,meshPosition,event.face.c),linePosition.copyAt(3,meshPosition,event.face.a),linePosition}return null}onDeselected(){}static#_=this.propDecorators={grid:[{type:core.ViewChild,args:["grid",{static:!0}]}],size:[{type:core.Input}],iterationsX:[{type:core.Input}],iterationsY:[{type:core.Input}],offset:[{type:core.Input}],render:[{type:core.Output}],gridEnter:[{type:core.Output}],deselected:[{type:core.Output}],gridClick:[{type:core.Output}]}};GridActorComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"atft-grid-actor",providers:[(0,provide_parent.T)(GridActorComponent)],template:'\n    <atft-grid-mesh #grid [size]="size" [iterationsX]="iterationsX" [iterationsY]="iterationsY" [offset]="offset"\n                    (click)="onMouseClick($event)"\n                    (mouseEnter)="onMouseEnter($event)"\n                    (mouseExit)="onDeselected()"\n                    [materialColor]="color"\n                    atft-raycaster-group\n    ></atft-grid-mesh>\n  '})],GridActorComponent);var abstract_object_3d=__webpack_require__("./projects/atft/src/lib/object/abstract-object-3d.ts"),renderer_service=__webpack_require__("./projects/atft/src/lib/renderer/renderer.service.ts"),dagre=__webpack_require__("./node_modules/dagre/index.js");class DagreUtils{static modelToGraph(model){const g=new dagre.graphlib.Graph({compound:!0,multigraph:!0});return g.setGraph(this.getLayout(model)),g.setDefaultEdgeLabel((function(){return{}})),this.updateGraph(g,model),dagre.layout(g),g}static updateBaseInfo(g,baseInfo){baseInfo&&baseInfo.forEach((node=>{g.setNode(node.name,{label:node.label,width:18,height:18}),node.composition&&g.setParent(node.name,node.composition)}))}static updateEdges(g,model){model.edges&&model.edges.forEach((edge=>{g.setEdge(edge.from,edge.to,{name:edge.name})}))}static updateGraph(g,model){this.updateBaseInfo(g,model.compositions),this.updateBaseInfo(g,model.nodes),this.updateEdges(g,model)}static getLayout(model){return model.layout}}let DagreLayoutComponent=class DagreLayoutComponent extends abstract_empty_directive.m{constructor(rendererService,parent){super(rendererService,parent),this.rendererService=rendererService,this.parent=parent,this.align="DL",this.rankdir="BT",this.nodesep=15,this.edgesep=1,this.ranksep=15,this.marginx=0,this.marginy=0,this.ranker="network-simplex",this.centered=!0,this.updated=new core.EventEmitter,this.graphModel={layout:{},nodes:[],edges:[]}}ngAfterViewInit(){super.ngAfterViewInit()}ngAfterContentInit(){this.layout()}layout(){this.graphModel.layout={align:this.align??"DL",rankdir:this.rankdir??"BT",nodesep:this.nodesep??15,edgesep:this.edgesep??1,ranksep:this.ranksep??15,marginx:this.marginx??0,marginy:this.marginy??0,ranker:this.ranker??"network-simplex"},this.graph=DagreUtils.modelToGraph(this.graphModel),this.graph&&this.syncGraphContainer(this.graph),this.updated.emit(),this.rendererService.render()}syncGraphContainer(g){const heigh=g.graph().height,width=g.graph().width;this.object&&this.centered&&width&&heigh&&(this.translateX=-width/2,this.translateY=-heigh/2,this.applyTranslation())}ngOnChanges(changes){if(super.ngOnChanges(changes),!this.object)return;let modified=!1;["align","rankdir","ranksep","nodesep","edgesep","marginx","marginy","ranker"].some((propName=>propName in changes))&&(this.layout(),modified=!0),modified&&this.changed.emit()}getGraphModel(){return this.graphModel}refreshLayout(){this.graph&&this.layout()}getGraph(){return this.graph}static#_=this.ctorParameters=()=>[{type:renderer_service.y},{type:abstract_object_3d.l,decorators:[{type:core.SkipSelf},{type:core.Optional}]}];static#_2=this.propDecorators={align:[{type:core.Input}],rankdir:[{type:core.Input}],nodesep:[{type:core.Input}],edgesep:[{type:core.Input}],ranksep:[{type:core.Input}],marginx:[{type:core.Input}],marginy:[{type:core.Input}],ranker:[{type:core.Input}],centered:[{type:core.Input}],updated:[{type:core.Output}]}};DagreLayoutComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"atft-dagre-layout",providers:[(0,provide_parent.T)(DagreLayoutComponent)],template:"\n    <ng-content></ng-content>"})],DagreLayoutComponent);var LineEndType,EdgeType,animation_service=__webpack_require__("./projects/atft/src/lib/animation/animation.service.ts"),line_connector_component=__webpack_require__("./projects/atft/src/lib/object/connector/line-connector.component.ts");!function(LineEndType){LineEndType.none="none",LineEndType.circle="circle",LineEndType.arrow="arrow"}(LineEndType||(LineEndType={})),function(EdgeType){EdgeType.sequence="sequence",EdgeType.association="association",EdgeType.message="message",EdgeType.line="line"}(EdgeType||(EdgeType={}));let DagreEdgeComponent=class DagreEdgeComponent extends line_connector_component.J{set type(val){switch(val){case EdgeType.association:this.animated=!1,this.solid=!1,this.startType=LineEndType.none,this.endType=LineEndType.arrow;break;case EdgeType.message:this.animated=!0,this.solid=!1,this.dashSize=1,this.startType=LineEndType.circle,this.endType=LineEndType.arrow;break;case EdgeType.line:this.animated=!1,this.solid=!0,this.startType=LineEndType.none,this.endType=LineEndType.none;break;case EdgeType.sequence:this.animated=!1,this.solid=!0,this.startType=LineEndType.none,this.endType=LineEndType.arrow;break;default:this.animated=!0,this.solid=!1,this.dashSize=4,this.startType=LineEndType.circle,this.endType=LineEndType.arrow}}constructor(rendererService,parent,animationService,injector){super(rendererService,parent,animationService),this.rendererService=rendererService,this.parent=parent,this.animationService=animationService,this.injector=injector,this.startType=LineEndType.circle,this.endType=LineEndType.arrow,this.dagreLayout=this.injector.get(DagreLayoutComponent),this.dagreLayout||console.warn("DagreEdgeComponent.constructor: atft-dagre-layout not found!"),this.syncGraph=this.syncGraph.bind(this),this.graphUpdated=this.dagreLayout.updated.subscribe(this.syncGraph)}newObject3DInstance(){const lineObject=super.newObject3DInstance();return this.appendLineEnds(lineObject),lineObject}appendLineEnds(lineObject){const material=new three_module.vBJ({color:this.materialColor,opacity:this.opacity,transparent:this.opacity<1,depthWrite:!0}),startGeometry=this.getConnectorEndGeometry(this.startType);startGeometry&&(this.lineStart=new three_module.Kj0(startGeometry,material),lineObject.add(this.lineStart));const endGeometry=this.getConnectorEndGeometry(this.endType);endGeometry&&(this.lineEnd=new three_module.Kj0(endGeometry,material),lineObject.add(this.lineEnd))}getConnectorEndGeometry(type){switch(type){case LineEndType.circle:return new three_module.zf8(.7,16);case LineEndType.arrow:const shape=new three_module.bnF;return shape.moveTo(0,-.5),shape.lineTo(1,2),shape.lineTo(0,1.7),shape.lineTo(-1,2),new three_module.oa8(shape);default:return}}ngOnInit(){super.ngOnInit(),this.addEdge()}addEdge(){this.dagreLayout&&this.dagreLayout.getGraphModel()&&(this.dagreLayout.getChildren().push(this),this.from&&this.to?this.dagreLayout.getGraphModel().edges?.push({name:this.name,from:this.from,to:this.to}):console.warn("DagreEdgeComponent.addChild: edge source/target is undefined"),this.dagreLayout.refreshLayout())}ngOnDestroy(){super.ngOnDestroy(),this.removeEdge()}removeEdge(){this.dagreLayout&&this.dagreLayout.getGraphModel()&&(this.graphUpdated?.unsubscribe(),this.dagreLayout.removeChildByName(this.name),this.dagreLayout.getGraphModel().edges=this.dagreLayout.getGraphModel().edges?.filter((i=>i.name!==this.name)),this.dagreLayout.refreshLayout())}syncGraph(){this.object&&this.syncGraphEdges(this.dagreLayout.getGraph())}syncGraphEdges(g){g.edges().forEach((e=>{const edge=g.edge(e);edge.name===this.name&&(this.positions=[],edge.points.forEach((p=>{Number.isNaN(p.x)||Number.isNaN(p.y)||this.positions.push(p.x,p.y,.1)})),this.updateEnds(),this.updateLineGeometry())}))}updateEnds(){const p=this.positions;p?.length>=9&&(this.updateEnd(this.lineStart,new three_module.Pa4(p[3],p[4],p[5]),new three_module.Pa4(p[0],p[1],p[2])),this.updateEnd(this.lineEnd,new three_module.Pa4(p[p.length-6],p[p.length-5],p[p.length-4]),new three_module.Pa4(p[p.length-3],p[p.length-2],p[p.length-1])))}updateEnd(lineSide,prevPoint,endPoint){if(lineSide){let angle=prevPoint.clone().sub(endPoint).angleTo(new three_module.Pa4(0,1,0));angle=prevPoint.x<endPoint.x?angle:-angle,lineSide.rotation.set(0,0,angle),lineSide.position.set(endPoint.x||0,endPoint.y||0,endPoint.z||0)}}getPositions(){return this.positions?this.positions:[0,0,0,0,0,0]}static#_=this.ctorParameters=()=>[{type:renderer_service.y},{type:abstract_object_3d.l,decorators:[{type:core.SkipSelf},{type:core.Optional}]},{type:animation_service.Y},{type:core.Injector}];static#_2=this.propDecorators={from:[{type:core.Input}],to:[{type:core.Input}],startType:[{type:core.Input}],endType:[{type:core.Input}],type:[{type:core.Input}]}};DagreEdgeComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"atft-dagre-edge",providers:[(0,provide_parent.T)(DagreEdgeComponent)],template:"<ng-content></ng-content>"})],DagreEdgeComponent);let DagreCompositionComponent=class DagreCompositionComponent extends abstract_empty_directive.m{set height(height){this._height=height,this.translateLabelY=this._height/2-3,this.cdRef.destroyed||this.cdRef.detectChanges()}get height(){return this._height}constructor(rendererService,parent,injector,cdRef){super(rendererService,parent),this.rendererService=rendererService,this.parent=parent,this.injector=injector,this.cdRef=cdRef,this.border="plane",this.render=new core.EventEmitter,this.selected=new core.EventEmitter,this.deselected=new core.EventEmitter,this.color="#A0A0A0",this.translateLabelY=0,this.dagreLayout=this.injector.get(DagreLayoutComponent),this.dagreLayout||console.warn("DagreCompositionComponent.constructor: atft-dagre-layout not found!"),this.syncGraph=this.syncGraph.bind(this),this.graphUpdated=this.dagreLayout.updated.subscribe(this.syncGraph)}onSelected(){this.color="#A4A4A4"}onDeselected(){this.color="#A0A0A0"}onClick(){this.color="#A0A0A0"}ngOnInit(){super.ngOnInit(),this.addNode()}addNode(){this.dagreLayout&&this.dagreLayout.getGraphModel()&&(this.dagreLayout.getChildren().push(this),this.dagreLayout.getGraphModel().nodes?.push({name:this.name,label:this.label,composition:this.composition}),this.dagreLayout.refreshLayout())}ngOnDestroy(){super.ngOnDestroy(),this.removeNode()}removeNode(){this.dagreLayout&&this.dagreLayout.getGraphModel()&&(this.graphUpdated?.unsubscribe(),this.dagreLayout.removeChildByName(this.name),this.dagreLayout.getGraphModel().nodes=this.dagreLayout.getGraphModel().nodes?.filter((i=>i.name!==this.name)),this.dagreLayout.refreshLayout())}syncGraphNodes(g){g.nodes().forEach((name=>{if(name===this.name){const node=g.node(name);this.translateX=node.x,this.translateY=node.y,this.applyTranslation(),this.width=node.width,this.height=node.height}}))}syncGraph(){this.object&&this.syncGraphNodes(this.dagreLayout.getGraph())}static#_=this.ctorParameters=()=>[{type:renderer_service.y},{type:abstract_object_3d.l,decorators:[{type:core.SkipSelf},{type:core.Optional}]},{type:core.Injector},{type:core.ChangeDetectorRef}];static#_2=this.propDecorators={label:[{type:core.Input}],border:[{type:core.Input}],height:[{type:core.Input}],width:[{type:core.Input}],render:[{type:core.Output}],selected:[{type:core.Output}],deselected:[{type:core.Output}],composition:[{type:core.Input}]}};DagreCompositionComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"atft-dagre-composition",providers:[(0,provide_parent.T)(DagreCompositionComponent)],template:'\n    <atft-plane-mesh *ngIf="border!==\'frame\'" atft-raycaster-group [width]="width" [height]="height" [materialColor]="color"\n                     [depthWrite]="true"\n                     (mouseEnter)="onSelected()"\n                     (mouseExit)="onDeselected()">\n      <atft-text-mesh [centered]="true" [text]="label" [size]="3" [translateY]="translateLabelY"\n                      materialColor="#E0E0E0">\n      </atft-text-mesh>\n    </atft-plane-mesh>\n\n    <atft-frame-mesh *ngIf="border===\'frame\'" [sizeX]="width" [sizeY]="height" [thickness]="2" [materialColor]="color"\n                     [depthWrite]="true"\n                     atft-raycaster-group (mouseEnter)="onSelected()" (mouseExit)="onDeselected()">\n      <atft-text-mesh [centered]="true" [text]="label" [size]="3" [translateY]="translateLabelY"\n                      materialColor="#E0E0E0">\n      </atft-text-mesh>\n    </atft-frame-mesh>\n\n  '})],DagreCompositionComponent);let DagreNodeComponent=class DagreNodeComponent extends abstract_empty_directive.m{constructor(rendererService,parent,injector){super(rendererService,parent),this.rendererService=rendererService,this.parent=parent,this.injector=injector,this.translateZ=0,this.dagreLayout=this.injector.get(DagreLayoutComponent),this.dagreLayout||console.warn("DagreNodeComponent.constructor: atft-dagre-layout not found!"),this.syncGraph=this.syncGraph.bind(this),this.graphUpdated=this.dagreLayout.updated.subscribe(this.syncGraph)}ngOnInit(){super.ngOnInit(),this.addNode()}addNode(){this.dagreLayout&&this.dagreLayout.getGraphModel()&&(this.dagreLayout.getChildren().push(this),this.dagreLayout.getGraphModel().nodes?.push({name:this.name,label:this.name,composition:this.composition}),this.dagreLayout.refreshLayout())}ngOnDestroy(){super.ngOnDestroy(),this.removeNode()}removeNode(){this.dagreLayout&&this.dagreLayout.getGraphModel()&&(this.graphUpdated?.unsubscribe(),this.dagreLayout.removeChildByName(this.name),this.dagreLayout.getGraphModel().nodes=this.dagreLayout.getGraphModel().nodes?.filter((i=>i.name!==this.name)),this.dagreLayout.refreshLayout())}syncGraphNodes(g){g.nodes().forEach((name=>{if(name===this.name){const node=g.node(name);this.translateX=node.x,this.translateY=node.y,this.applyTranslation()}}))}syncGraph(){this.object&&this.syncGraphNodes(this.dagreLayout.getGraph())}static#_=this.ctorParameters=()=>[{type:renderer_service.y},{type:abstract_object_3d.l,decorators:[{type:core.SkipSelf},{type:core.Optional}]},{type:core.Injector}];static#_2=this.propDecorators={composition:[{type:core.Input}],translateZ:[{type:core.Input}],container:[{type:core.ViewChild,args:["container",{read:core.ViewContainerRef,static:!0}]}]}};DagreNodeComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"atft-dagre-node",providers:[(0,provide_parent.T)(DagreNodeComponent)],template:"<template #container></template><ng-content></ng-content>"})],DagreNodeComponent);var browser=__webpack_require__("./node_modules/yaml/browser/index.js"),model_service=__webpack_require__("./projects/atft/src/lib/object/loader/services/model.service.ts");let ModelActorComponent=class ModelActorComponent extends abstract_server_actor.F{set model(model){const iconProvider=this.modelService.getSource(model);this.modelPath=iconProvider.url}get model(){return this.model}constructor(rendererService,parent,modelService){super(rendererService,parent),this.rendererService=rendererService,this.parent=parent,this.modelService=modelService}static#_=this.ctorParameters=()=>[{type:renderer_service.y},{type:abstract_object_3d.l,decorators:[{type:core.SkipSelf},{type:core.Optional}]},{type:model_service.b}];static#_2=this.propDecorators={model:[{type:core.Input}]}};ModelActorComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"atft-model-actor",providers:[(0,provide_parent.T)(ModelActorComponent)],template:'\n    <atft-empty>\n\n      <atft-empty atft-raycaster-group (mouseEnter)="onSelected()" (mouseExit)="onDeselected()" (click)="onClick()">\n        <atft-obj-loader *ngIf="modelPath" [model]="modelPath">\n        </atft-obj-loader>\n      </atft-empty>\n\n      <atft-text-mesh [text]="label" [size]="2" [bevelEnabled]="false" [height]="0" [centered]="true"\n                      material="basic" materialColor="#DADADA" [translateY]="-11" [translateZ]="0.2">\n      </atft-text-mesh>\n      <atft-frame-mesh *ngIf="showFrame" [thickness]="1" [sizeX]="15" [sizeY]="15" [translateZ]="0.1" material="basic"\n                       [materialColor]="color">\n      </atft-frame-mesh>\n\n    </atft-empty>\n  '})],ModelActorComponent);let ActorRepositoryService=class ActorRepositoryService{constructor(resolver){this.resolver=resolver,this.list=new Map,this.register("stand",server_stand_actor_component.s),this.register("compact",ServerCompactActorComponent),this.register("barrel",ServerBarrelActorComponent),this.register("icon",ServerIconActorComponent),this.register("workstation",WorkstationActorComponent),this.register("model",ModelActorComponent)}register(id,component){this.defaultId||(this.defaultId=id),this.list.set(id,component)}getComponentFactory(id){const requestId=id||this.defaultId,comp=this.list.get(requestId);if(comp){return this.resolver.resolveComponentFactory(comp)}}static#_=this.ctorParameters=()=>[{type:core.ComponentFactoryResolver}]};ActorRepositoryService=(0,tslib_es6.gn)([(0,core.Injectable)()],ActorRepositoryService);let DagreYamlParserComponent=class DagreYamlParserComponent extends abstract_empty_directive.m{constructor(rendererService,parent,resolver,actorRepository){super(rendererService,parent),this.rendererService=rendererService,this.parent=parent,this.resolver=resolver,this.actorRepository=actorRepository,this.status=new core.EventEmitter,this.instances=[]}ngAfterViewInit(){super.ngAfterViewInit(),this.parseAndCreate()}ngOnChanges(changes){super.ngOnChanges(changes),this.object&&["yaml"].some((propName=>propName in changes))&&this.parseAndCreate()}parseAndCreate(){if(this.yaml)try{this.destroyAll();const model=browser.Qc(this.yaml);model&&model.nodes&&model.nodes.length>0&&(model.compositions?.forEach((i=>this.createComposition(i))),model.nodes?.forEach((i=>this.createNode(i))),model.edges?.forEach((i=>this.createEdge(i)))),this.status.emit(!0)}catch(e){throw console.warn("DagreYamlParserComponent.parseAndCreate failed",e),this.status.emit(!1),e}}getNodeComponent(id){return this.actorRepository.getComponentFactory(id)}createNode(node){const nodeFactory=this.resolver.resolveComponentFactory(DagreNodeComponent),nodeRef=this.container.createComponent(nodeFactory);nodeRef.instance.name=node.name,nodeRef.instance.composition=node.composition,this.instances.push(nodeRef);const id=node.model?"model":node.type,serverFactory=this.getNodeComponent(id),serverRef=nodeRef.instance.container.createComponent(serverFactory);serverRef.instance.name=node.name,serverRef.instance.label=node.label?node.label:node.name,serverRef.instance.icon=node.icon,serverRef.instance.model=node.model,this.instances.push(serverRef)}createEdge(edge){const factory=this.resolver.resolveComponentFactory(DagreEdgeComponent),edgeRef=this.container.createComponent(factory);edgeRef.instance.from=edge.from,edgeRef.instance.to=edge.to,edge.type&&(edgeRef.instance.type=edge.type),edge.color&&(edgeRef.instance.materialColor=edge.color),this.instances.push(edgeRef)}destroyAll(){this.instances.forEach((i=>{i.destroy()})),this.instances=[]}createComposition(composition){const factory=this.resolver.resolveComponentFactory(DagreCompositionComponent),compositionRef=this.container.createComponent(factory);compositionRef.instance.name=composition.name,compositionRef.instance.label=composition.label?composition.label:composition.name,compositionRef.instance.composition=composition.composition,compositionRef.instance.border=composition.border,this.instances.push(compositionRef)}static#_=this.ctorParameters=()=>[{type:renderer_service.y},{type:abstract_object_3d.l,decorators:[{type:core.SkipSelf},{type:core.Optional}]},{type:core.ComponentFactoryResolver},{type:ActorRepositoryService}];static#_2=this.propDecorators={yaml:[{type:core.Input}],status:[{type:core.Output}],container:[{type:core.ViewChild,args:["container",{read:core.ViewContainerRef}]}]}};DagreYamlParserComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"atft-dagre-yaml-parser",providers:[(0,provide_parent.T)(DagreYamlParserComponent)],template:"\n    <template #container></template>"})],DagreYamlParserComponent);let AtftDataCenterActorModule=class AtftDataCenterActorModule{};AtftDataCenterActorModule=(0,tslib_es6.gn)([(0,core.NgModule)({imports:[common.CommonModule,atft_module.p],declarations:[LayerActorComponent,ServerBarrelActorComponent,server_stand_actor_component.s,ServerCompactActorComponent,ServerIconActorComponent,WorkstationActorComponent,GridActorComponent,DagreLayoutComponent,DagreEdgeComponent,DagreCompositionComponent,DagreNodeComponent,DagreYamlParserComponent,ModelActorComponent],exports:[LayerActorComponent,ServerBarrelActorComponent,server_stand_actor_component.s,ServerCompactActorComponent,ServerIconActorComponent,WorkstationActorComponent,GridActorComponent,DagreLayoutComponent,DagreEdgeComponent,DagreCompositionComponent,DagreNodeComponent,DagreYamlParserComponent,ModelActorComponent],providers:[ActorRepositoryService]})],AtftDataCenterActorModule)},"./projects/atft/src/lib/actor/data-center/server/abstract-server-actor.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{F:()=>AbstractServerActor});var tslib__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),_angular_core__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),_object__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./projects/atft/src/lib/object/abstract-empty-directive.ts");let AbstractServerActor=class AbstractServerActor extends _object__WEBPACK_IMPORTED_MODULE_0__.m{constructor(){super(...arguments),this.render=new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter,this.selected=new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter,this.deselected=new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter,this.actorClick=new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter,this.color="#ffffff",this.showFrame=!0}onSelected(){this.color="#fff0f0"}onDeselected(){this.color="#ffffff"}onClick(){console.log("ServerActorComponent.onClick"),this.color="#ffa0a0",this.actorClick.emit()}static#_=this.propDecorators={label:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input}],render:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Output}],selected:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Output}],deselected:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Output}],actorClick:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Output}],icon:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input}],showFrame:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input}]}};AbstractServerActor=(0,tslib__WEBPACK_IMPORTED_MODULE_2__.gn)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Directive)()],AbstractServerActor)},"./projects/atft/src/lib/actor/data-center/server/server-stand-actor.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{s:()=>ServerStandActorComponent});var tslib__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),_angular_core__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),_util__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./projects/atft/src/lib/util/provide-parent.ts"),_abstract_server_actor__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./projects/atft/src/lib/actor/data-center/server/abstract-server-actor.ts");let ServerStandActorComponent=class ServerStandActorComponent extends _abstract_server_actor__WEBPACK_IMPORTED_MODULE_0__.F{};ServerStandActorComponent=(0,tslib__WEBPACK_IMPORTED_MODULE_1__.gn)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Component)({selector:"atft-server-stand-actor",providers:[(0,_util__WEBPACK_IMPORTED_MODULE_3__.T)(ServerStandActorComponent)],template:'\n    <atft-empty name="server-box">\n\n      \x3c!-- TODO: template? --\x3e\n      <atft-empty atft-raycaster-group (mouseEnter)="onSelected()" (mouseExit)="onDeselected()" (click)="onClick()">\n        <atft-box-mesh [height]="10" [width]="10" [depth]="14" material="phong" [materialColor]="color" [translateZ]="7"\n                       atft-raycaster-group (mouseEnter)="onSelected()" (mouseExit)="onDeselected()" (click)="onClick()">\n          <atft-svg-loader *ngIf="icon" [icon]="icon" overrideMaterialColor="#ffffff"\n                           material="basic" [maxX]="8" [maxY]="8" [translateZ]="0"\n                           [translateY]="-5.1" [rotateX]="(90 | deg2rad)" [rotateZ]="(180 | deg2rad)" [rotateY]="(180 | deg2rad)">\n          </atft-svg-loader>\n        </atft-box-mesh>\n      </atft-empty>\n\n      <atft-text-mesh [text]="label" [size]="2" [bevelEnabled]="false" [height]="0" [centered]="true"\n                      material="basic" materialColor="#DADADA" [translateY]="-11" [translateZ]="0.1"\n      [depthWrite]="true">\n      </atft-text-mesh>\n      <atft-frame-mesh *ngIf="showFrame" [thickness]="1" [sizeX]="15" [sizeY]="15" [translateZ]="0.2" material="basic"\n                       [depthWrite]="true" [materialColor]="color">\n      </atft-frame-mesh>\n    </atft-empty>\n  '})],ServerStandActorComponent)},"./projects/atft/src/lib/object/abstract-empty-directive.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{m:()=>AbstractEmptyDirective});var tslib__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),_angular_core__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),three__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/three/build/three.module.js"),_abstract_object_3d__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./projects/atft/src/lib/object/abstract-object-3d.ts");let AbstractEmptyDirective=class AbstractEmptyDirective extends _abstract_object_3d__WEBPACK_IMPORTED_MODULE_0__.l{newObject3DInstance(){return new three__WEBPACK_IMPORTED_MODULE_1__.Tme}};AbstractEmptyDirective=(0,tslib__WEBPACK_IMPORTED_MODULE_2__.gn)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_3__.Directive)()],AbstractEmptyDirective)}}]);